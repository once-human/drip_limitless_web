<div class="modal fade" id="re-talking-modal" role="dialog" data-backdrop="static" data-keyboard="false">
	<div class="modal-dialog wow_mat_mdl modal-md">
		<div class="modal-content tag_call_box">
			<div class="text-center">
				<span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><path fill="currentColor" d="M19.23 15.26l-2.54-.29c-.61-.07-1.21.14-1.64.57l-1.84 1.84c-2.83-1.44-5.15-3.75-6.59-6.59l1.85-1.85c.43-.43.64-1.03.57-1.64l-.29-2.52c-.12-1.01-.97-1.77-1.99-1.77H5.03c-1.13 0-2.07.94-2 2.07.53 8.54 7.36 15.36 15.89 15.89 1.13.07 2.07-.87 2.07-2v-1.73c.01-1.01-.75-1.86-1.76-1.98z"/></svg> <?php echo $wo['lang']['audio_call'];?></span>
				<img src="<?php echo $wo['incall']['in_call_user']['avatar'];?>" alt="">
				<h4><?php echo $wo['incall']['in_call_user']['name'];?></h4>
				<p><?php echo $wo['lang']['audio_call_desc'];?> <?php echo $wo['incall']['in_call_user']['username'];?></p>
				<div id="me" class="hidden"></div>
				<div id="remote-media">
					<div class="alert alert-info"><?php echo $wo['lang']['please_wait']?></div>
				</div>
				<button type="button" class="btn btn-danger btn-mat decline-call" onclick="Wo_CloseCall('<?php echo $wo['incall']['id'];?>');" title="<?php echo $wo['lang']['cancel'];?>"><svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path fill="currentColor" d="M4.51 15.48l2-1.59c.48-.38.76-.96.76-1.57v-2.6c3.02-.98 6.29-.99 9.32 0v2.61c0 .61.28 1.19.76 1.57l1.99 1.58c.8.63 1.94.57 2.66-.15l1.22-1.22c.8-.8.8-2.13-.05-2.88-6.41-5.66-16.07-5.66-22.48 0-.85.75-.85 2.08-.05 2.88l1.22 1.22c.71.72 1.85.78 2.65.15z"/></svg></button>
			</div>
		</div>
	</div>
</div>

<?php if ($wo['config']['agora_chat_video'] == 1) { ?>
  <script type="text/javascript">
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    if (!navigator.getUserMedia) {
	  $('#remote-media').html('<div class="alert alert-danger">Sorry, WebRTC is not available in your browser.</div>');
    }
    var agoraAppId = "<?php echo $wo['config']['agora_chat_app_id'];?>";
    var token = "<?php echo $wo['incall']['access_token'];?>";
    var channelName = "<?php echo $wo['incall']['room'];?>";
    var uid = <?php echo $wo['user']['id'];?>;

    // Handle errors.
    let handleError = function(err){
            console.log("Error: ", err);
    };
    // video profile settings
    var cameraVideoProfile = '480p_4'; // 640 × 480 @ 30fps  & 750kbs
    var screenVideoProfile = '480p_2'; // 640 × 480 @ 30fps
    // create client instances for camera (client) and screen share (screenClient)
    var client = AgoraRTC.createClient({mode: 'rtc', codec: 'vp8'}); 
    function initClientAndJoinChannel(agoraAppId, token, channelName, uid) {
      // init Agora SDK
      client.init(agoraAppId, function () {
        console.log("AgoraRTC client initialized");
        joinChannel(channelName, uid, token); // join channel upon successfull init
      }, function (err) {
        console.log("[ERROR] : AgoraRTC client init failed", err);
      });
    }
    // join a channel
    function joinChannel(channelName, uid, token) {
      client.join(token, channelName, uid, function(uid) {
          console.log("User " + uid + " join channel successfully");
          createCameraStream(uid);
          //localStreams.camera.id = uid; // keep track of the stream uid 
      }, function(err) {
          console.log("[ERROR] : join channel failed", err);
      });
    }

    // video streams for channel
    function createCameraStream(uid) {
      var localStream = AgoraRTC.createStream({
        streamID: uid,
        audio: true,
        video: false,
        screen: false
      });
      localStream.setVideoProfile(cameraVideoProfile);
      localStream.init(function() {
        console.log("getUserMedia successfully");
        // TODO: add check for other streams. play local stream full size if alone in channel
        localStream.play('me'); // play the given stream within the local-video div

        // publish local stream
        client.publish(localStream, function (err) {
          console.log("[ERROR] : publish local stream error: " + err);
        });
      
        //enableUiControls(localStream); // move after testing
        //localStreams.camera.stream = localStream; // keep track of the camera stream for later
      }, function (err) {
        console.log("[ERROR] : getUserMedia failed", err);
      });
    }
    client.on('stream-added', function (evt) {
      client.subscribe(evt.stream,  function (err) {
          console.log("[ERROR] : subscribe stream failed", err);
        });
    });

    client.on('stream-subscribed', function (evt) {
      var remoteStream = evt.stream;
      var remoteId = remoteStream.getId();
      $('#remote-media').empty();
      remoteStream.play('remote-media');
    });
    function leaveChannel() {

      client.leave(function() {
        // console.log("client leaves channel");
        // localStreams.camera.stream.stop() // stop the camera stream playback
        // client.unpublish(localStreams.camera.stream); // unpublish the camera stream
        // localStreams.camera.stream.close(); // clean up and close the camera stream
        $("#remote-media").empty() // clean up the remote feeds
        location.href = "<?php echo($wo['config']['site_url']) ?>";
      }, function(err) {
        console.log("client leave failed ", err); //error handling
      });
    }
    // remove the remote-container when a user leaves the channel
    client.on("peer-leave", function(evt) {

      location.href = "<?php echo($wo['config']['site_url']) ?>";
    });

    // use tokens for added security
    function generateToken() {
      return null; // TODO: add a token generation
    }
    $(document).on('click', '.decline-call', function(e) {
        leaveChannel(); 
        location.href = "<?php echo($wo['config']['site_url']) ?>";
    });
    
    initClientAndJoinChannel(agoraAppId, token, channelName, uid);
  </script>
<?php }else{ ?>
<script>
navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
if (!navigator.getUserMedia) {
  $('#remote-media').html('<div class="alert alert-danger">Sorry, WebRTC is not available in your browser.</div>');
}

Twilio.Video.connect('<?php echo $wo['incall']['access_token'];?>', { name: '<?php echo $wo['incall']['room'];?>', audio: true, video: false }).then(room => {
  console.log('Connected to Room "%s"', room.name);
 
  room.participants.forEach(participantConnected);
  room.on('participantConnected', participantConnected);
  room.on('disconnected', room => {
    // Detach the local media elements
    room.localParticipant.tracks.forEach(publication => {
      const attachedElements = publication.track.detach();
      attachedElements.forEach(element => element.remove());
      location.href = "<?php echo($wo['config']['site_url']) ?>";
    });
  });

  $(document).on('click', 'a[data-ajax]', function(e) {
      room.disconnect();
  });
  $(document).on('click', '.decline-call', function(e) {
      room.disconnect();
  });
});
 
function participantConnected(participant) {
  console.log('Participant "%s" connected', participant.identity);
 
  const div = document.createElement('div');
  div.id = participant.sid;
  //div.innerText = participant.identity;
  participant.tracks.forEach(publication => {
    if (publication.isSubscribed) {
      const track = publication.track;
      div.appendChild(track.attach());
    }
  });
  participant.on('trackSubscribed', track => {
    $('#remote-media').html('');
    document.getElementById('remote-media').appendChild(track.attach());
  });
 
  $('#remote-media').html(div);
}
</script>
<?php } ?>